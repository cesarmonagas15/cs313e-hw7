"""
Student information for this assignment:

Replace Cesar Monagas Romero with your name.
On my/our honor, Cesar Monagas Romero, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: cam9225
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        Inserts the term with the coefficient coeff and exponent exp into the polynomial.
        If a term with that exponent already exists, adds the coefficients together.
        Terms with a zero coefficient are omitted.
        """
        if coeff == 0:
            return

        new_node = Node(coeff, exp)

        # Insert at beginning if the list is empty or the new term's exponent is greater.
        if self.head is None or self.head.exp < exp:
            new_node.next = self.head
            self.head = new_node
            return

        prev = None
        current = self.head

        # Traverse until we find the correct spot (list is in descending order).
        while current is not None and current.exp > exp:
            prev = current
            current = current.next

        # If we find a term with the same exponent, combine coefficients.
        if current is not None and current.exp == exp:
            current.coeff += coeff
            if current.coeff == 0:
                if prev is None:
                    self.head = current.next
                else:
                    prev.next = current.next
            return

        # Insert the new term between prev and current.
        new_node.next = current
        if prev is None:
            self.head = new_node
        else:
            prev.next = new_node

    def add(self, p):
        """
        Adds the polynomial p to the current polynomial and returns the resulting polynomial
        as a new linked list.
        """
        result = LinkedList()
        curr1 = self.head
        curr2 = p.head

        # Merge the two sorted lists.
        while curr1 is not None and curr2 is not None:
            if curr1.exp > curr2.exp:
                result.insert_term(curr1.coeff, curr1.exp)
                curr1 = curr1.next
            elif curr1.exp < curr2.exp:
                result.insert_term(curr2.coeff, curr2.exp)
                curr2 = curr2.next
            else:
                summed_coeff = curr1.coeff + curr2.coeff
                result.insert_term(summed_coeff, curr1.exp)
                curr1 = curr1.next
                curr2 = curr2.next

        # Add any remaining terms.
        while curr1 is not None:
            result.insert_term(curr1.coeff, curr1.exp)
            curr1 = curr1.next

        while curr2 is not None:
            result.insert_term(curr2.coeff, curr2.exp)
            curr2 = curr2.next

        return result

    def mult(self, p):
        """
        Multiplies the current polynomial with polynomial p and returns the product as a new linked list.
        """
        result = LinkedList()
        curr1 = self.head
        while curr1:
            curr2 = p.head
            while curr2:
                prod_coeff = curr1.coeff * curr2.coeff
                prod_exp = curr1.exp + curr2.exp
                result.insert_term(prod_coeff, prod_exp)
                curr2 = curr2.next
            curr1 = curr1.next
        return result

    def __str__(self):
        """
        Returns a string representation of the polynomial.
        """
        str_terms = []
        curr = self.head
        while curr:
            str_terms.append(f"({curr.coeff}, {curr.exp})")
            curr = curr.next
        return " + ".join(str_terms)


def main():
    """
    Reads two polynomials from standard input, computes their sum and product,
    and prints the results.
    """
    p = LinkedList()
    q = LinkedList()

    # Read the first polynomial.
    p_terms = int(input().strip())
    for _ in range(p_terms):
        coeff, exp = map(int, input().strip().split())
        p.insert_term(coeff, exp)

    # Read until we encounter a non-empty line (for the second polynomial's term count).
    while not (line := input().strip()):
        pass
    q_terms = int(line)

    for _ in range(q_terms):
        coeff, exp = map(int, input().strip().split())
        q.insert_term(coeff, exp)

    # Compute sum and product.
    poly_sum = p.add(q)
    poly_product = p.mult(q)

    # Print results.
    print(poly_sum)
    print(poly_product)


if __name__ == "__main__":
    main()
